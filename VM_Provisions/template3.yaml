#Launches at point of intitial deploy. Passed the specified tag value of which to deploy 
#provisioning resources to 
AWSTemplateFormatVersion: 2010-09-09
Parameters:
    buildid:
        Type: String

    specifiedtagvalue:
        Type: String

    personalemail:
        Type: String
Resources:
    #Creates lambda function to trigger upon instance_launch event with target that launches instance monitoring resources
    Ec2eventtargetfunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub 'ec2discoverytarget${buildid}'
            Handler: Resource_Discovery_Endpoint.lambda_handler
            Role: !GetAtt Provisioninglaunchrole.Arn
            Runtime: python3.7
            Tags: 
                -   Key: 'invocation'
                    Value: 'event'
                -   Key: 'buildid'
                    Value: !Ref buildid              
            Code:
                S3Bucket: !Join
                    -   ''
                    -   - 'vmmonitoringsresources-'
                        - !Ref buildid
                S3Key: 'Resources/Resource_Discovery_Endpoint.zip'
            Environment:
                Variables:
                    specified_tag_value: !Ref specifiedtagvalue
                    cfrole: !GetAtt Cloudformationec2provisionsrole.Arn
                    buildid: !Ref buildid
                    topicarn: !Ref Snstopic
                    bucketkey: !Join
                        -   ''
                        -   - 'vmmonitoringsresources-'
                            - !Ref buildid
                            - '/Resources/template0.yaml'
    #Event for ec2 launch discovery config event with the lambda function as target 
    Configdiscoveryevent:
        Type: AWS::Events::Rule
        Properties:
            Name: !Sub 'Configec2discoveryevent${buildid}'
            RoleArn: !GetAtt Configeventrole.Arn
            EventPattern:   
                source: 
                    - "aws.config"
                detail-type: 
                    - "Config Configuration Item Change"
                detail: 
                    messageType: 
                        - "ConfigurationItemChangeNotification"
                    configurationItem: 
                        resourceType: 
                            - "AWS::EC2::Instance"
                        configurationItemStatus: 
                            - "ResourceDiscovered"
            Targets:
                -   
                    Arn: !GetAtt Ec2eventtargetfunction.Arn
                    Id: 'lambdafunctionforec2provisions'
                    InputTransformer:
                        InputPathsMap:
                            "instanceid": "$.detail.configurationItem.resourceId"
                            "tags": "$.detail.configurationItem.tags"
                            "instancetype": "$.detail.configurationItem.configuration.instanceType"
                            "image": "$.detail.configurationItem.configuration.imageid"
                            "monitoring": "$.detail.configurationItem.configuration.monitoring.state"
                            "configuration": "$.detail.configurationItem.relationships"
                        InputTemplate: |
                            {
                                "instance_id": <instanceid>,
                                "ec2_tags": <tags>,
                                "instance_type": <instancetype>,
                                "image_id": <image>,
                                "detailedmonitoring": <monitoring>,    
                                "configuration_details": <configuration>
                            }
    #Lambda specific permissions for allowing eventbridge access to invoke function
    Lambdaeventbridgepermission:
        Type: AWS::Lambda::Permission
        Properties: 
            FunctionName: !Ref Ec2eventtargetfunction
            Action: 'lambda:InvokeFunction'
            Principal: events.amazonaws.com
            SourceArn: !GetAtt Configdiscoveryevent.Arn
    Lambdacloudwatchpermission:
        Type: AWS::Lambda::Permission
        Properties: 
            FunctionName: !Ref ScheduledSnapshotFunction
            Action: 'lambda:InvokeFunction'
            Principal: events.amazonaws.com
            SourceArn: !GetAtt ScheduledSnapshotEvent.Arn
    #topic to handle usage notifs and be subscribed to by provision functions
    Snstopic:
        Type: AWS::SNS::Topic
        Properties:
            TopicName: 'VmMonitoring'
    Subscribeemail:
        Type: AWS::SNS::Subscription
        Properties: 
            Protocol: email
            TopicArn: !Ref Snstopic
            Endpoint: !Ref personalemail
            

    ScheduledSnapshotFunction:
        Type: AWS::Lambda::Function
        Properties:
            Role: !GetAtt Ebsfunctionrole.Arn
            Runtime: python3.7
            Handler: 'Ebs_Scheduled.lambda_handler'
            Environment:
                Variables:
                    topicarn: !GetAtt Snstopic.TopicArn
            Code:
                S3Bucket: !Sub 'vmmonitoringsresources-${buildid}'
                S3Key: 'Resources/Ebs_Scheduled.zip'
            Tags:
                -   Key: 'invocation'
                    Value: 'event'  
                -   Key: 'buildid'
                    Value: buildid    

    ScheduledSnapshotEvent:
        Type: AWS::Events::Rule
        Properties:
            RoleArn: !GetAtt Ebseventrole.Arn
            Name: !Join
                - ''
                -   - 'ScheduledSnapshots'
                    - !Ref buildid 
            ScheduleExpression: rate(15 minutes) #rate for testing
            Targets:  
                -   Id: 'snapshotfuntiontarget'
                    Arn: !GetAtt ScheduledSnapshotFunction.Arn    

    Ebsfunctionrole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join
                - ''
                -   - 'Scheduledsnapshotsfuncrole'
                    - !Ref buildid
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: lambda.amazonaws.com
                        Action: 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action:                 
                                    - 'logs:CreateLogGroup'
                                    - 'logs:CreateLogStream'
                                    - 'logs:PutLogEvents'
                                Resource: '*'           
                            -   Effect: Allow
                                Action: 
                                    - 'ebs:CompleteSnapshot'
                                    - 'ebs:StartSnapshot'
                                Resource: '*'
                            -   Effect: Allow
                                Action: 'sns:publish'
                                Resource: !GetAtt Snstopic.TopicArn
                            -   Effect: Allow
                                Action: 
                                    - 'ec2:StartInstances'
                                    - 'ec2:StopInstances'
                                Resource: '*'
                            -   Effect: Allow
                                Action: 
                                - 's3:GetObject'
                                Resource: !Sub 'arn:aws:s3:::vmmonitoringsresources-${buildid}/Resources/*'    
    
    Ebseventrole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join
                - ''
                -   - 'Eventroleebssnap'
                    - !Ref buildid
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: events.amazonaws.com
                        Action: 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -   Effect: Allow
                                Action:
                                    - 'lambda:InvokeFunction'
                                Resource: !GetAtt ScheduledSnapshotFunction.Arn

    
    #Assumed used by ec2 discovery target function
    Provisioninglaunchrole:
        Type: AWS::IAM::Role
        Properties:    
            RoleName: 'Ec2eventendpointlambdahrole'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - 'lambda.amazonaws.com'
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 'cloudformation:CreateStack'
                                Resource: "*"                    
                            -   Effect: Allow
                                Action: 
                                    - 'ec2:DescribeInstances'
                                    - 'ec2:DescribeInstanceStatus'
                                Resource: "*"
                            -   Effect: Allow
                                Action:
                                    -   'logs:CreateLogGroup'
                                    -   'logs:CreateLogStream'
                                    -   'logs:PutLogEvents'
                                Resource: "*"
                            -   Effect: Allow
                                Action: 'sns:publish'
                                Resource: !GetAtt Snstopic.TopicArn
                            -   Effect: Allow
                                Action: 'iam:PassRole'
                                Resource: !GetAtt Cloudformationec2provisionsrole.Arn
                            -   Effect: Allow
                                Action: 
                                - 's3:GetObject'
                                - 's3:PutObject'
                                Resource: !Sub 'arn:aws:s3:::vmmonitoringsresources-${buildid}/Resources/*'
    
    
    #to be used by event rule
    Configeventrole:
        Type: AWS::IAM::Role
        Properties:    
            RoleName: 'configeventrole'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - 'events.amazonaws.com'
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 'config:ListDiscoveredResources'
                                Resource: '*'                        
                            -   Effect: Allow
                                Action: 'lambda:InvokeFunction'
                                Resource: !GetAtt Ec2eventtargetfunction.Arn
    
    #to be used for monitoring stack creation
    Cloudformationec2provisionsrole:
        Type: AWS::IAM::Role
        Properties:    
            RoleName: 'stackec2provsrole'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - 'cloudformation.amazonaws.com'
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 
                                    - 'cloudwatch:PutMetricAlarm'
                                    - 'cloudwatch:DescribeAlarms'
                                    - 'cloudwatch:DeleteAlarms'
                                Resource: '*'                 





#topic arn for other functions to use, 
#ARNs for assignment function to add target to rule upon new function discovered
Outputs:
    topicarn:
        Value: !GetAtt Snstopic.TopicArn
        Export:
            Name: !Sub '${AWS::StackName}-topicarn'
    existingfunctionarn:
        Value: !GetAtt Ec2eventtargetfunction.Arn
        Export:
            Name: !Sub '${AWS::StackName}-existingfunction'                                       
    rolearn:
        Value: !GetAtt Configeventrole.Arn
        Export:
            Name: !Sub '${AWS::StackName}-rolearn'
       
    
    