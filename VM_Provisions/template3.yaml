#Launches at point of intitial deploy. gets passed the specified tag value of which to deploy 
#provisioning resources to 
AWSTemplateFormatVersion: 2010-09-09
Parameters:
    buildid:
        Type: String

    specifiedtagvalue:
        Type: String

    personalemail:
        Type: String
Resources:
    #Creates lambda function to trigger upon instance_launch event with target that launches instance monitoring resources
    Ec2eventtargetfunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: 'ec2discendpoint'
            Handler: Resource_Discovery_Endpoint.lambda_handler
            Role: !GetAtt Provisioninglaunchrole.Arn
            Runtime: python3.7
            Tags: 
                -   Key: 'invocation'
                    Value: 'event'
                -   Key: 'buildid'
                    Value: !Ref buildid              
            Code:
                S3Bucket: !Join
                    -   ''
                    -   - 'vmmonitoringsresources-'
                        - !Ref buildid
                S3Key: 'Resources/Resource_Discovery_Endpoint.zip'
            Environment:
                Variables:
                    specified_tag_value: !Ref specifiedtagvalue
                    cfrole: !GetAtt Cloudformationec2provisionsrole.Arn
                    buildid: !Ref buildid
                    tablename: !Ref Instanceidstable
                    topicarn: !Ref Snstopic
                    bucketkey: !Join
                        -   ''
                        -   - 'vmmonitoringsresources-'
                            - !Ref buildid
                            - '/Resources/template0.yaml'
    #Event for ec2 launch discovery config event with a lambda function target 
    Configdiscoveryevent:
        Type: AWS::Events::Rule
        Properties:
            Name: 'Configec2discoveryevent'
            RoleArn: !GetAtt Configeventrole.Arn
            EventPattern:   
                source: 
                    - "aws.config"
                detail-type: 
                    - "Config Configuration Item Change"
                detail: 
                    messageType: 
                        - "ConfigurationItemChangeNotification"
                    configurationItem: 
                        resourceType: 
                            - "AWS::EC2::Instance"
                        configurationItemStatus: 
                            - "ResourceDiscovered"
            Targets:
                -   
                    Arn: !GetAtt Ec2eventtargetfunction.Arn
                    Id: 'lambdafunctionforec2provisions'
                    InputTransformer:
                        InputPathsMap:
                            "instanceid": "$.detail.configurationItem.resourceId"
                            "tags": "$.detail.configurationItem.tags"
                            "instancetype": "$.detail.configurationItem.configuration.instanceType"
                            "image": "$.detail.configurationItem.configuration.imageid"
                            "monitoring": "$.detail.configurationItem.configuration.monitoring.state"
                            "volumedata": "$.detail.configurationItem.relationships"
                        InputTemplate: |
                            {
                                "instance_id": <instanceid>,
                                "ec2_tags": <tags>,
                                "instance_type": <instancetype>,
                                "image_id": <image>,
                                "detailedmonitoring": <monitoring>,    
                                "volume_data": <volumedata>
                            }
    
    #topic to handle usage notifs and be subscribed to by provision functions
    Snstopic:
        Type: AWS::SNS::Topic
        Properties:
            TopicName: 'VmMonitoring'
    Subscribeemail:
        Type: AWS::SNS::Subscription
        Properties: 
            Protocol: email-json
            TopicArn: !Ref Snstopic
            Endpoint: !Ref personalemail
    
    
    #Table to store instance ids to run scheduled function on
    Instanceidstable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: 'InstanceIDs'
            AttributeDefinitions:
                - AttributeName: 'InstanceIds'
                  AttributeType: 'S'
            KeySchema:
                - AttributeName: 'InstanceIds'
                  KeyType: 'HASH'
            ProvisionedThroughput:
                ReadCapacityUnits: 3
                WriteCapacityUnits: 3
    
    
    #Assumed used by ec2 provisions function
    Provisioninglaunchrole:
        Type: AWS::IAM::Role
        Properties:    
            RoleName: 'provisionslaunchrole'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - 'lambda.amazonaws.com'
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 'cloudformation:CreateStack'
                                Resource: "*"                    
                            -   Effect: Allow
                                Action: 
                                    - 'ec2:DescribeInstances'
                                    - 'ec2:DescribeInstanceStatus'
                                Resource: "*"
                            -   Effect: Allow
                                Action:
                                    -   'logs:CreateLogGroup'
                                    -   'logs:CreateLogStream'
                                    -   'logs:PutLogEvents'
                                Resource: "*"
                            -   Effect: Allow
                                Action: 'sns:publish'
                                Resource: !GetAtt Snstopic.TopicArn
                            -   Effect: Allow
                                Action: 'iam:PassRole'
                                Resource: !GetAtt Cloudformationec2provisionsrole.Arn
                            -   Effect: Allow
                                Action: 's3:GetObject'
                                Resource: !Sub 'arn:aws:s3:::vmmonitoringsresources-${buildid}/Resources/*'
    #to be used by event rule&target
    Configeventrole:
        Type: AWS::IAM::Role
        Properties:    
            RoleName: 'configeventrole'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - 'events.amazonaws.com'
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 'config:ListDiscoveredResources'
                                Resource: '*'                        
                            -   Effect: Allow
                                Action: 'lambda:InvokeFunction'
                                Resource: !GetAtt Ec2eventtargetfunction.Arn
    #to be used for monitoring stack creation
    Cloudformationec2provisionsrole:
        Type: AWS::IAM::Role
        Properties:    
            RoleName: 'stackec2provsrole'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - 'cloudformation.amazonaws.com'
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 
                                    - 'cloudwatch:PutMetricAlarm'
                                    - 'cloudwatch:DescribeAlarms'
                                    - 'cloudwatch:DeleteAlarms'
                                Resource: '*'                 
                            -   Effect: Allow
                                Action: 's3:GetObject'
                                Resource: !Sub 'arn:aws:s3:::vmmonitoringsresources-${buildid}/Resources/*'
                            -   Effect: Allow
                                Action: 
                                    - 'lambda:CreateFunction'
                                    - 'lambda:DeleteFunction'
                                    - 'lambda:TagResource'
                                    - 'lambda:GetFunction'
                                Resource: '*'
                            -   Effect: Allow
                                Action: 
                                    - 'events:PutEvents'
                                    - 'events:DeleteEvents'
                                    - 'events:PutRule'
                                    - 'events:EnableRule'
                                    - 'events:DescribeRule'
                                    - 'events:RemoveTargets'
                                    - 'events:PutTargets'
                                    - 'events:DeleteRule'
                                Resource: '*'
                            -   Effect: Allow
                                Action: 
                                    - 'iam:CreateRole'
                                    - 'iam:UpdateRole'
                                    - 'iam:GetRole'
                                    - 'iam:DeleteRole'
                                    - 'iam:PutRolePolicy'
                                    - 'iam:DetachRolePolicy'
                                    - 'iam:DeleteRolePolicy'
                                    - 'iam:AttachRolePolicy'
                                    - 'iam:PassRole'
                                    - 'iam:CreateServiceLinkedRole'
                                Resource: '*'





#topic arn for other functions to use, 
#ARNs for assignment function to add target to rule upon new function discovered
Outputs:
    topicarn:
        Value: !GetAtt Snstopic.TopicArn
        Export:
            Name: !Sub '${AWS::StackName}-topicarn'
    existingfunctionarn:
        Value: !GetAtt Ec2eventtargetfunction.Arn
        Export:
            Name: !Sub '${AWS::StackName}-existingfunction'                                       
    rolearn:
        Value: !GetAtt Configeventrole.Arn
        Export:
            Name: !Sub '${AWS::StackName}-rolearn'
       
    
    